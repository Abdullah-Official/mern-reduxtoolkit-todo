{"version":3,"sources":["app/helpers/fetch2.js","reducers/authReducer.js","components/auth.jsx","reducers/todoReducer.js","components/todo.jsx","App.js","app/store.js","serviceWorker.js","index.js"],"names":["fetch2","api","body","a","fetch","method","headers","localStorage","getItem","JSON","stringify","res","json","fetch3","type","signupUser","createAsyncThunk","result","signinUser","authReducer","createSlice","name","initialState","token","loading","error","reducers","addToken","state","action","logout","removeItem","extraReducers","fulfilled","payload","message","pending","setItem","actions","Auth","dispatch","useDispatch","useState","email","setEmail","password","setPassword","auth","setAuth","useSelector","user","className","style","color","value","onChange","e","target","placeholder","onClick","createTodo","fetchTodo","deleteTodo","todoReducer","push","filter","item","_id","Todo","myTodo","setMyTodo","todos","useEffect","todo","map","v","i","href","id","App","disptach","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79a23961.chunk.js","sourcesContent":["\r\nexport const fetch2 = async (api, body) => {\r\n    const res = await fetch(api, {\r\n         method: \"post\",\r\n         headers:{\r\n             \"Content-Type\": \"application/json\",\r\n             \"Authorization\": localStorage.getItem('token')\r\n         },\r\n         body: JSON.stringify(body)\r\n     })\r\n    return await res.json()\r\n }\r\n\r\n export const fetch3 = async (api,type) => {\r\n    const res = await fetch(api, {\r\n         method: type,\r\n         headers:{\r\n             \"Content-Type\": \"application/json\",\r\n             \"Authorization\": localStorage.getItem('token')\r\n         },\r\n     })\r\n    return await res.json()\r\n }\r\n ","import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport { fetch2 } from '../app/helpers/fetch2'\r\n\r\n\r\nconst initialState = {\r\n    token: \"\",\r\n    loading: false,\r\n    error: \"\",\r\n}\r\n\r\n\r\n\r\nexport const signupUser = createAsyncThunk(\r\n    'signupuser',\r\n    async (body) => {\r\n     const result = await  fetch2('/signup', body)\r\n     return result\r\n    }\r\n\r\n  )\r\n\r\n  export const signinUser = createAsyncThunk(\r\n    'signinuser',\r\n    async (body) => {\r\n     const result = await  fetch2('/signin', body)\r\n     return result\r\n    }\r\n\r\n  )\r\n\r\n const authReducer = createSlice({\r\n     name:'user',\r\n     initialState,\r\n     reducers:{\r\n         addToken: (state,action) => {\r\n            state.token = localStorage.getItem('token')\r\n         },\r\n         logout: (state,action) => {\r\n             state.token = null\r\n             localStorage.removeItem('token')\r\n         }\r\n     },\r\n     extraReducers: {\r\n         [signupUser.fulfilled]: (state,action) => {\r\n            state.loading = false\r\n            if(action.payload.error){\r\n                state.error = action.payload.error\r\n            }else{\r\n                state.error = action.payload.message\r\n            }\r\n         },\r\n         [signupUser.pending]: (state,action) => {\r\n             state.loading = true\r\n         },\r\n         [signinUser.fulfilled]: (state,action) => {\r\n             state.loading = false\r\n             if(action.payload.error){\r\n                 state.error = action.payload.error\r\n             }\r\n             else{\r\n                 state.token = action.payload.token\r\n                 localStorage.setItem('token', action.payload.token)\r\n             }\r\n         },\r\n         [signinUser.pending]: (state,action) => {\r\n             state.loading = true\r\n         }\r\n     }\r\n })\r\n\r\n\r\n export const {addToken, logout} = authReducer.actions\r\n\r\n export default authReducer.reducer","import React, {useState, useEffect} from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {signinUser, signupUser} from '../reducers/authReducer'\r\n\r\nfunction Auth() {\r\n    const dispatch = useDispatch();\r\n    const [email,setEmail] = useState();\r\n    const [password,setPassword] = useState();\r\n    const [auth,setAuth] = useState('signin')\r\n    const {loading, error} = useSelector(state => {\r\n      return  state.user\r\n    })\r\n\r\n    const authenticate = () => {\r\n        if(auth === 'signin'){\r\n            dispatch(signinUser({email,password}))\r\n        }else{\r\n            dispatch(signupUser({email,password}))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n            {loading && (\r\n                 <div className=\"progress\">\r\n                 <div className=\"indeterminate\"></div>\r\n             </div>\r\n            )}\r\n            <h1 style={{color:'red'}}>please {auth}!</h1>\r\n            {error && (<h5>{error}</h5>)}\r\n            <input \r\n            type=\"email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            placeholder=\"Enter your email ..\"\r\n            />\r\n             <input \r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            placeholder=\"Enter your password ..\"\r\n            />\r\n            {\r\n                auth === 'signin' ? \r\n                <h6 onClick={() => setAuth('signup')} >Dont have an account ?</h6> : \r\n                <h6 onClick={() => setAuth('signin')} >Already have an account ?</h6>\r\n            }\r\n            <button className=\"btn\" onClick={() => authenticate()}>{auth}</button>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Auth\r\n","import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport { fetch2, fetch3 } from '../app/helpers/fetch2'\r\n\r\n\r\nconst initialState = []\r\n\r\n\r\nexport const createTodo = createAsyncThunk('createtodo', \r\n    async (body) => {\r\n        const result = await fetch2('/createtodo', body)\r\n        return result\r\n    }\r\n)\r\n\r\nexport const fetchTodo = createAsyncThunk('fetchtodos', \r\n    async () => {\r\n        const result = await fetch3('/gettodo', 'get')\r\n        return result\r\n    }\r\n)\r\n\r\nexport const deleteTodo = createAsyncThunk('deletetodo', \r\n    async (body) => {\r\n        const result = await fetch3(`/remove/${body}`, 'delete')\r\n        return result\r\n    }\r\n)\r\n\r\n const todoReducer = createSlice({\r\n     name:'todo',\r\n     initialState,\r\n     reducers:{ },\r\n     extraReducers: {\r\n         [createTodo.fulfilled] : (state,{payload:{message}}) => {\r\n            if(message){\r\n                state.push(message)\r\n            }\r\n         },\r\n         [fetchTodo.fulfilled] : (state,{payload:{message}}) => {\r\n           return message\r\n         },\r\n         [deleteTodo.fulfilled]: (state, action) => {\r\n           return  state.filter((item) => item._id != action.payload.message._id)\r\n         }\r\n     },\r\n     \r\n })\r\n\r\n\r\n\r\n export default todoReducer.reducer","import React, {useEffect, useState} from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { logout } from '../reducers/authReducer';\r\nimport { createTodo, deleteTodo, fetchTodo } from '../reducers/todoReducer';\r\n\r\nfunction Todo() {\r\n    const [myTodo, setMyTodo] = useState();\r\n    const dispatch = useDispatch()\r\n    const todos = useSelector(state => state.todos)\r\n     const addTodo = () => {\r\n        dispatch(createTodo({todo: myTodo}))\r\n        setMyTodo('')\r\n    }\r\n\r\n    const removeTodo = (id) => {\r\n        dispatch(deleteTodo(id))\r\n    }\r\n\r\n    const logoutFun = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodo())\r\n    },[])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n         <h1 style={{color:'red'}}>TODO APPLICATION</h1>\r\n         <input type=\"text\"\r\n         placeholder=\"Write todo here ..\"\r\n         value={myTodo}\r\n         onChange={(e) => setMyTodo(e.target.value)}\r\n         />\r\n         <button className=\"btn btn-red\" onClick={() => addTodo() }>Add todo</button>\r\n         <ul className=\"collection with-header \">\r\n        <li className=\"collection-header\"><h4>My TODOS</h4></li>\r\n        {\r\n            todos.map((v,i) => (\r\n                <li key={i} className=\"collection-item\"><div>{v.todo}<a href=\"#!\" className=\"secondary-content\"><i className=\"material-icons\" onClick={() => removeTodo(v._id)}>send</i></a></div></li>\r\n\r\n            ))\r\n        }\r\n      </ul>\r\n      <button className=\"btn btn-red\" onClick={() => logoutFun() }>Log Out</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport Auth from \"./components/auth\";\nimport Todo from \"./components/todo\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addToken } from \"./reducers/authReducer\";\n\nfunction App() {\n  const { token } = useSelector((state) => state.user);\n  const disptach = useDispatch();\n\n  useEffect(() => {\n    disptach(addToken());\n  }, [disptach]);\n\n  return <div className=\"App\">{!token ? <Auth /> : <Todo />}</div>;\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from '../reducers/authReducer'\nimport todoReducer from '../reducers/todoReducer'\n\nexport const store = configureStore({\n  reducer: {\n    user:authReducer,\n    todos: todoReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}